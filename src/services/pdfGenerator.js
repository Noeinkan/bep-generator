import jsPDF from 'jspdf';
import CONFIG from '../config/bepConfig';

export const generatePDF = (formData, bepType) => {
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });
  let y = 10;
  const margin = 10;
  const pageWidth = pdf.internal.pageSize.getWidth();
  const maxLineWidth = pageWidth - 2 * margin;
  const lineHeight = 6;

  const addText = (text, size, bold = false, align = 'left') => {
    pdf.setFontSize(size);
    pdf.setFont('helvetica', bold ? 'bold' : 'normal');
    const lines = text.split('\n').flatMap(line => pdf.splitTextToSize(line, maxLineWidth));
    lines.forEach(line => {
      pdf.text(line, margin, y, { align });
      y += lineHeight;
      if (y > 270) {
        pdf.addPage();
        y = margin;
      }
    });
  };

  const addTable = (rows) => {
    rows.forEach(([label, value]) => {
      addText(label + ':', 10, true);
      addText(value, 10);
      y += lineHeight / 2;
    });
  };

  const addTableData = (field) => {
    let value = formData[field.name];
    if (!value) return;

    addText(field.label + ':', 12, true);
    y += lineHeight / 2;

    if (field.type === 'table' && Array.isArray(value)) {
      if (value.length === 0) return;

      const columns = field.columns || ['Role/Discipline', 'Name/Company', 'Experience/Notes'];

      // Add table header
      let headerText = columns.join(' | ');
      addText(headerText, 9, true);
      addText('-'.repeat(headerText.length), 9);

      // Add table rows
      value.forEach((row, index) => {
        let rowText = columns.map(col => row[col] || '').join(' | ');
        addText(rowText, 9);
      });
      y += lineHeight;
    } else if (field.type === 'checkbox' && Array.isArray(value)) {
      addText(value.join(', '), 10);
    } else if (typeof value === 'string') {
      addText(value, 10);
    }
    y += lineHeight;
  };

  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleDateString();
  const formattedTime = currentDate.toLocaleTimeString();

  // Header
  addText('BIM EXECUTION PLAN (BEP)', 18, true, 'center');
  y += lineHeight;
  addText('ISO 19650-2 Compliant', 14, true, 'center');
  y += lineHeight;
  addText(CONFIG.bepTypeDefinitions[bepType].title, 12, true, 'center');
  y += lineHeight;
  addText(CONFIG.bepTypeDefinitions[bepType].description, 10, false, 'center');
  y += lineHeight * 2;

  // Document Information
  addText('Document Information', 12, true);
  y += lineHeight;
  addTable([
    ['Document Type', CONFIG.bepTypeDefinitions[bepType].title],
    ['Document Purpose', CONFIG.bepTypeDefinitions[bepType].purpose],
    ['Project Name', formData.projectName || 'Not specified'],
    ['Project Number', formData.projectNumber || 'Not specified'],
    ['Generated Date', `${formattedDate} at ${formattedTime}`],
    ['Status', bepType === 'pre-appointment' ? 'Tender Submission' : 'Working Document']
  ]);
  y += lineHeight * 2;

  // Group steps by category
  const groupedSteps = CONFIG.steps.reduce((acc, step, index) => {
    const cat = step.category;
    if (!acc[cat]) acc[cat] = [];
    const stepConfig = CONFIG.getFormFields(bepType, index);
    if (stepConfig) {
      acc[cat].push({ index, title: `${acc[cat].length + 1}. ${stepConfig.title.toUpperCase()}`, fields: stepConfig.fields });
    }
    return acc;
  }, {});

  Object.entries(groupedSteps).forEach(([cat, items]) => {
    addText(CONFIG.categories[cat].name, 16, true);
    y += lineHeight;

    items.forEach(item => {
      addText(item.title, 14, true);
      y += lineHeight;

      item.fields.forEach(field => {
        if (field.type === 'table') {
          addTableData(field);
        } else {
          const value = formData[field.name] || '';
          addText(field.label, 12, true);
          y += lineHeight / 2;

          if (field.type === 'checkbox' && Array.isArray(value)) {
            value.forEach(item => {
              addText('- ' + item, 10);
            });
          } else {
            addText(value, 10);
          }
          y += lineHeight / 2;
        }
      });
      y += lineHeight;
    });
  });

  // Footer
  y += lineHeight * 2;
  addText('Document Control Information', 12, true);
  y += lineHeight;
  addTable([
    ['Document Type', 'BIM Execution Plan (BEP)'],
    ['ISO Standard', 'ISO 19650-2:2018'],
    ['Document Status', 'Work in Progress'],
    ['Generated By', 'Professional BEP Generator Tool'],
    ['Generated Date', formattedDate],
    ['Generated Time', formattedTime]
  ]);

  return pdf;
};