import React, { useCallback, useState, useMemo, useEffect, useRef } from 'react';
import ReactFlow, {
  addEdge,
  Background,
  Controls,
  MiniMap,
  useEdgesState,
  useNodesState,
  Handle,
  Position,
  ConnectionMode,
  EdgeLabelRenderer,
  getStraightPath,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { Download, Upload, RotateCcw, Trash2, Plus, Settings as SettingsIcon, X } from 'lucide-react';
import { SWIMLANES, getInitialNodes, getInitialEdges, DEFAULT_NODE_STYLE } from './CDEFlowDiagram.constants';

// Swimlane background component (clickable to add solutions)
const SwimlaneBackground = ({ data }) => {
  const [showAddButton, setShowAddButton] = React.useState(false);

  const handleClick = () => {
    if (data.onAddNode) {
      data.onAddNode(data.id);
    }
  };

  return (
    <div
      style={{
        width: '230px',
        height: '500px',
        background: data.color,
        border: `2px solid ${data.borderColor}`,
        borderRadius: '8px',
        opacity: showAddButton ? 0.5 : 0.3,
        cursor: 'pointer',
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'opacity 0.2s',
      }}
      onMouseEnter={() => setShowAddButton(true)}
      onMouseLeave={() => setShowAddButton(false)}
      onClick={handleClick}
      className="nodrag"
    >
      {showAddButton && (
        <div
          style={{
            background: data.borderColor,
            color: 'white',
            borderRadius: '50%',
            width: '48px',
            height: '48px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 4px 6px rgba(0,0,0,0.2)',
            pointerEvents: 'none',
          }}
        >
          <Plus size={28} strokeWidth={3} />
        </div>
      )}
    </div>
  );
};

// Swimlane header component with Add Solution button
const SwimlaneHeader = ({ data, id }) => {
  const [editingLabel, setEditingLabel] = React.useState(false);
  const [editingFullLabel, setEditingFullLabel] = React.useState(false);
  const [label, setLabel] = React.useState(data.label);
  const [fullLabel, setFullLabel] = React.useState(data.fullLabel);

  const handleAddClick = () => {
    if (data.onAddSolution) {
      data.onAddSolution(data.id);
    }
  };

  const handleSaveLabel = () => {
    if (data.onLabelChange) {
      data.onLabelChange(id, 'label', label);
    }
    setEditingLabel(false);
  };

  const handleSaveFullLabel = () => {
    if (data.onLabelChange) {
      data.onLabelChange(id, 'fullLabel', fullLabel);
    }
    setEditingFullLabel(false);
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', alignItems: 'center' }}>
      <div
        style={{
          padding: '10px 16px',
          background: data.color || '#e5e7eb',
          border: `2px solid ${data.borderColor || '#9ca3af'}`,
          borderRadius: '8px',
          fontWeight: '700',
          fontSize: '15px',
          color: data.textColor || '#374151',
          textAlign: 'center',
          textTransform: 'uppercase',
          letterSpacing: '0.5px',
          width: '200px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          cursor: 'text',
        }}
        title="Double-click to edit"
      >
        {editingLabel ? (
          <input
            value={label}
            onChange={(e) => setLabel(e.target.value)}
            onBlur={handleSaveLabel}
            onKeyDown={(e) => {
              if (e.key === 'Enter') handleSaveLabel();
              if (e.key === 'Escape') { setLabel(data.label); setEditingLabel(false); }
            }}
            className="nodrag"
            autoFocus
            style={{
              background: 'transparent',
              border: '1px solid currentColor',
              borderRadius: '4px',
              padding: '2px 4px',
              width: '100%',
              textAlign: 'center',
              fontSize: '15px',
              fontWeight: '700',
              color: 'inherit',
              textTransform: 'uppercase',
            }}
          />
        ) : (
          <div
            onClick={(e) => { e.stopPropagation(); setEditingLabel(true); }}
            className="nodrag nopan"
            style={{ cursor: 'text', userSelect: 'none' }}
          >
            {data.label}
          </div>
        )}
        <div
          style={{ fontSize: '10px', fontWeight: '400', marginTop: '2px', opacity: 0.8, cursor: 'text' }}
          title="Click to edit"
        >
          {editingFullLabel ? (
            <input
              value={fullLabel}
              onChange={(e) => setFullLabel(e.target.value)}
              onBlur={handleSaveFullLabel}
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleSaveFullLabel();
                if (e.key === 'Escape') { setFullLabel(data.fullLabel); setEditingFullLabel(false); }
              }}
              className="nodrag"
              autoFocus
              style={{
                background: 'transparent',
                border: '1px solid currentColor',
                borderRadius: '4px',
                padding: '2px 4px',
                width: '100%',
                textAlign: 'center',
                fontSize: '10px',
                fontWeight: '400',
                color: 'inherit',
              }}
            />
          ) : (
            <span
              onClick={(e) => { e.stopPropagation(); setEditingFullLabel(true); }}
              className="nodrag nopan"
              style={{ cursor: 'text', userSelect: 'none' }}
            >
              {data.fullLabel}
            </span>
          )}
        </div>
      </div>
      <button
        onClick={handleAddClick}
        className="nodrag"
        style={{
          padding: '6px 12px',
          background: data.borderColor || '#3b82f6',
          color: 'white',
          border: 'none',
          borderRadius: '6px',
          fontSize: '12px',
          fontWeight: '500',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        }}
      >
        <Plus size={14} />
        Add Solution
      </button>
    </div>
  );
};

// Solution node component with editing capability and horizontal handles
const SolutionNode = React.memo(({ data, id }) => {
  const [editing, setEditing] = useState(false);
  const [label, setLabel] = useState(data.label);

  const handleSave = () => {
    if (data.onChange) {
      data.onChange(id, label);
    }
    setEditing(false);
  };

  const nodeStyle = data.nodeStyle || {
    background: '#ffffff',
    borderColor: '#6b7280',
    textColor: '#000000'
  };

  return (
    <div
      style={{
        padding: '10px 14px',
        border: `1px solid ${nodeStyle.borderColor}`,
        borderRadius: '6px',
        background: nodeStyle.background,
        color: nodeStyle.textColor,
        minWidth: '160px',
        textAlign: 'center',
        fontSize: '14px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        position: 'relative',
      }}
      title="Click text to edit"
    >
      <Handle
        type="target"
        position={Position.Left}
        style={{ background: nodeStyle.borderColor, left: '-8px' }}
      />
      {editing ? (
        <input
          value={label}
          onChange={(e) => setLabel(e.target.value)}
          onBlur={handleSave}
          onKeyDown={(e) => {
            if (e.key === 'Enter') handleSave();
            if (e.key === 'Escape') { setLabel(data.label); setEditing(false); }
          }}
          className="nodrag"
          autoFocus
          style={{
            background: nodeStyle.background,
            color: nodeStyle.textColor,
            border: `1px solid ${nodeStyle.borderColor}`,
            borderRadius: '4px',
            padding: '4px 8px',
            width: '100%',
            textAlign: 'center',
            fontSize: '14px',
          }}
        />
      ) : (
        <div
          onClick={(e) => {
            e.stopPropagation();
            setEditing(true);
          }}
          className="nodrag nopan"
          style={{ cursor: 'text', userSelect: 'none' }}
        >
          {data.label}
        </div>
      )}
      <Handle
        type="source"
        position={Position.Right}
        style={{ background: nodeStyle.borderColor, right: '-8px' }}
      />
    </div>
  );
});

// Custom straight edge with editable label (horizontal connections)
const LabeledStraightEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, data, markerEnd, style }) => {
  const [edgePath, labelX, labelY] = getStraightPath({
    sourceX,
    sourceY,
    sourcePosition,
    targetX,
    targetY,
    targetPosition,
  });

  const [editing, setEditing] = useState(false);
  const [label, setLabel] = useState(data?.label || '');

  const handleSave = () => {
    if (data?.onChange) {
      data.onChange(id, label);
    }
    setEditing(false);
  };

  return (
    <>
      <path
        id={id}
        d={edgePath}
        fill="none"
        stroke={style?.stroke || '#9ca3af'}
        strokeWidth={style?.strokeWidth || 2}
        markerEnd={markerEnd}
      />
      <EdgeLabelRenderer>
        <div
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,
            background: 'white',
            padding: '2px 8px',
            borderRadius: '4px',
            fontSize: '12px',
            fontWeight: 500,
            border: '1px solid #d1d5db',
            cursor: 'pointer',
            pointerEvents: 'all',
          }}
          onDoubleClick={(e) => {
            e.stopPropagation();
            setEditing(true);
          }}
          title="Double-click to edit label"
          className="nodrag nopan"
        >
          {editing ? (
            <input
              value={label}
              onChange={(e) => setLabel(e.target.value)}
              onBlur={handleSave}
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleSave();
                if (e.key === 'Escape') { setLabel(data?.label || ''); setEditing(false); }
              }}
              autoFocus
              onClick={(e) => e.stopPropagation()}
              style={{
                border: '1px solid #3b82f6',
                borderRadius: '2px',
                padding: '2px 4px',
                fontSize: '12px',
                width: '80px',
              }}
            />
          ) : (
            <span>{label || 'flow'}</span>
          )}
        </div>
      </EdgeLabelRenderer>
    </>
  );
};

// Modal component for text input
const InputModal = ({ isOpen, onClose, onSubmit, title, placeholder, defaultValue = '' }) => {
  const [value, setValue] = useState(defaultValue);
  const inputRef = useRef(null);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const handleSubmit = (e) => {
    e.preventDefault();
    if (value.trim()) {
      onSubmit(value.trim());
      setValue('');
    }
  };

  const handleClose = () => {
    setValue('');
    onClose();
  };

  return (
    <div
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(0, 0, 0, 0.5)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 9999,
      }}
      onClick={handleClose}
    >
      <div
        style={{
          background: 'white',
          padding: '24px',
          borderRadius: '8px',
          boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',
          minWidth: '400px',
          maxWidth: '500px',
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
          <h3 style={{ margin: 0, fontSize: '18px', fontWeight: '600' }}>{title}</h3>
          <button
            onClick={handleClose}
            style={{
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              padding: '4px',
              display: 'flex',
              alignItems: 'center',
            }}
          >
            <X size={20} />
          </button>
        </div>
        <form onSubmit={handleSubmit}>
          <input
            ref={inputRef}
            type="text"
            value={value}
            onChange={(e) => setValue(e.target.value)}
            placeholder={placeholder}
            style={{
              width: '100%',
              padding: '10px 12px',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '14px',
              marginBottom: '16px',
            }}
          />
          <div style={{ display: 'flex', gap: '8px', justifyContent: 'flex-end' }}>
            <button
              type="button"
              onClick={handleClose}
              style={{
                padding: '8px 16px',
                background: '#e5e7eb',
                color: '#374151',
                border: 'none',
                borderRadius: '6px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
              }}
            >
              Cancel
            </button>
            <button
              type="submit"
              style={{
                padding: '8px 16px',
                background: '#3b82f6',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
              }}
            >
              Add
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const CDEFlowDiagram = ({ field, value, onChange, error }) => {
  const { name, label, required } = field;

  // Suppress ResizeObserver errors (harmless console spam from ReactFlow)
  useEffect(() => {
    const errorHandler = (e) => {
      if (e.message?.includes('ResizeObserver loop')) {
        e.stopImmediatePropagation();
        e.preventDefault();
        return true;
      }
    };

    const unhandledRejectionHandler = (e) => {
      if (e.reason?.message?.includes('ResizeObserver loop')) {
        e.preventDefault();
      }
    };

    window.addEventListener('error', errorHandler);
    window.addEventListener('unhandledrejection', unhandledRejectionHandler);

    return () => {
      window.removeEventListener('error', errorHandler);
      window.removeEventListener('unhandledrejection', unhandledRejectionHandler);
    };
  }, []);

  // Parse value or use defaults
  const parseValue = (val) => {
    if (typeof val === 'string') {
      try {
        return JSON.parse(val);
      } catch {
        return { nodes: getInitialNodes(), edges: getInitialEdges() };
      }
    }
    return val || { nodes: getInitialNodes(), edges: getInitialEdges() };
  };

  const parsedValue = parseValue(value);
  const [nodes, setNodes, onNodesChange] = useNodesState(parsedValue.nodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(parsedValue.edges);
  const [showSettings, setShowSettings] = useState(false);
  const [swimlaneCustom, setSwimlaneCustom] = useState(parsedValue.swimlaneCustom || {});
  const [nodeStyle, setNodeStyle] = useState(parsedValue.nodeStyle || DEFAULT_NODE_STYLE);

  // Modal states
  const [modalState, setModalState] = useState({ isOpen: false, type: null, swimlaneId: null });

  // Memoized swimlane lookup map for performance
  const swimlaneMap = useMemo(() => {
    const map = new Map();
    SWIMLANES.forEach(lane => map.set(lane.id, lane));
    return map;
  }, []);

  // Update parent component when diagram changes
  const updateParent = useCallback((newNodes, newEdges, customSettings = swimlaneCustom, customNodeStyle = nodeStyle) => {
    if (onChange) {
      onChange(name, JSON.stringify({
        nodes: newNodes,
        edges: newEdges,
        swimlaneCustom: customSettings,
        nodeStyle: customNodeStyle
      }, null, 2));
    }
  }, [onChange, name, swimlaneCustom, nodeStyle]);

  // Handle node label change
  const handleNodeLabelChange = useCallback((nodeId, newLabel) => {
    setNodes((nds) => {
      const updatedNodes = nds.map((node) =>
        node.id === nodeId ? { ...node, data: { ...node.data, label: newLabel } } : node
      );
      updateParent(updatedNodes, edges);
      return updatedNodes;
    });
  }, [setNodes, edges, updateParent]);

  // Handle edge label change
  const handleEdgeLabelChange = useCallback((edgeId, newLabel) => {
    setEdges((eds) => {
      const updatedEdges = eds.map((edge) =>
        edge.id === edgeId ? { ...edge, data: { ...edge.data, label: newLabel } } : edge
      );
      updateParent(nodes, updatedEdges);
      return updatedEdges;
    });
  }, [setEdges, nodes, updateParent]);

  // Handle swimlane header label change
  const handleSwimlaneHeaderChange = useCallback((nodeId, property, newValue) => {
    setNodes((nds) => {
      const updatedNodes = nds.map((node) => {
        // Update both header and background nodes with the same swimlane id
        const swimlaneId = node.id.replace('header-', '').replace('bg-', '');
        const targetId = nodeId.replace('header-', '').replace('bg-', '');
        if (swimlaneId === targetId && (node.id.startsWith('header-') || node.id.startsWith('bg-'))) {
          return { ...node, data: { ...node.data, [property]: newValue } };
        }
        return node;
      });
      updateParent(updatedNodes, edges);
      return updatedNodes;
    });
  }, [setNodes, edges, updateParent]);

  // Add node directly from swimlane header
  // Open modal for adding node to swimlane
  const openAddNodeModal = useCallback((swimlaneId) => {
    setModalState({ isOpen: true, type: 'addNode', swimlaneId });
  }, []);

  // Handle adding node from modal
  const handleAddNode = useCallback((solutionName) => {
    const { swimlaneId } = modalState;
    const swimlane = swimlaneMap.get(swimlaneId);
    if (!swimlane) return;

    const existingNodesInLane = nodes.filter(n => n.data?.swimlane === swimlaneId && n.type === 'solution');
    const yPosition = 80 + (existingNodesInLane.length * 80);

    const newNodeId = `node-${Date.now()}`;
    const newNode = {
      id: newNodeId,
      type: 'solution',
      data: { label: solutionName, swimlane: swimlaneId, onChange: handleNodeLabelChange },
      position: { x: swimlane.x + 25, y: yPosition },
    };

    const newNodes = [...nodes, newNode];

    // Find the next swimlane to the right
    const currentIndex = SWIMLANES.findIndex(s => s.id === swimlaneId);
    const nextSwimlane = SWIMLANES[currentIndex + 1];

    let newEdges = [...edges];

    if (nextSwimlane) {
      // Find the first solution node in the next swimlane
      const nextSwimlaneNodes = nodes.filter(n => n.data?.swimlane === nextSwimlane.id && n.type === 'solution');

      if (nextSwimlaneNodes.length > 0) {
        // Connect to the first node in the next swimlane
        const targetNode = nextSwimlaneNodes[0];
        const newEdge = {
          id: `edge-${Date.now()}`,
          source: newNodeId,
          target: targetNode.id,
          type: 'labeledStraight',
          style: { stroke: nextSwimlane.borderColor, strokeWidth: 2 },
          data: { label: '', onChange: handleEdgeLabelChange }
        };
        newEdges = [...edges, newEdge];
      }
    }

    setNodes(newNodes);
    setEdges(newEdges);
    updateParent(newNodes, newEdges);
    setModalState({ isOpen: false, type: null, swimlaneId: null });
  }, [modalState, swimlaneMap, nodes, edges, setNodes, setEdges, updateParent, handleNodeLabelChange, handleEdgeLabelChange]);

  // Memoize node types with onChange handlers
  const nodeTypes = useMemo(() => ({
    swimlaneBackground: (props) => <SwimlaneBackground {...props} data={{ ...props.data, onAddNode: openAddNodeModal }} />,
    swimlaneHeader: (props) => <SwimlaneHeader {...props} data={{ ...props.data, onAddSolution: openAddNodeModal, onLabelChange: handleSwimlaneHeaderChange }} />,
    solution: (props) => <SolutionNode {...props} data={{ ...props.data, onChange: handleNodeLabelChange, nodeStyle }} />,
  }), [handleNodeLabelChange, openAddNodeModal, handleSwimlaneHeaderChange, nodeStyle]);

  // Memoize edge types
  const edgeTypes = useMemo(() => ({
    labeledStraight: (props) => <LabeledStraightEdge {...props} data={{ ...props.data, onChange: handleEdgeLabelChange }} />,
  }), [handleEdgeLabelChange]);

  // Handle node changes and update parent with constraints
  // Handle node changes without constraints (let React Flow handle dragging smoothly)
  const handleNodesChange = useCallback((changes) => {
    onNodesChange(changes);
  }, [onNodesChange]);

  // Apply constraints after dragging stops (better performance and UX)
  const handleNodeDragStop = useCallback((event, node) => {
    // Backgrounds and headers: reset to original position
    if (node.id.startsWith('bg-') || node.id.startsWith('header-')) {
      const originalNode = nodes.find(n => n.id === node.id);
      if (originalNode) {
        setNodes((nds) =>
          nds.map((n) =>
            n.id === node.id
              ? { ...n, position: originalNode.position }
              : n
          )
        );
      }
      return;
    }

    // Solutions: snap to swimlane X position (only allow Y movement)
    if (node.type === 'solution' && node.data?.swimlane) {
      const swimlane = swimlaneMap.get(node.data.swimlane);
      if (swimlane) {
        setNodes((nds) => {
          const updatedNodes = nds.map((n) =>
            n.id === node.id
              ? { ...n, position: { x: swimlane.x + 25, y: node.position.y } }
              : n
          );
          updateParent(updatedNodes, edges);
          return updatedNodes;
        });
      }
    } else {
      // For other nodes, just update parent
      updateParent(nodes, edges);
    }
  }, [nodes, edges, setNodes, updateParent, swimlaneMap]);

  // Handle edge changes and update parent
  const handleEdgesChange = useCallback((changes) => {
    onEdgesChange(changes);
    setEdges((eds) => {
      updateParent(nodes, eds);
      return eds;
    });
  }, [onEdgesChange, nodes, updateParent, setEdges]);

  // Handle node deletion (protect headers and backgrounds)
  const handleNodesDelete = useCallback((deleted) => {
    const deletedIds = deleted.filter(n => !n.id.startsWith('header-') && !n.id.startsWith('bg-')).map(n => n.id);
    setNodes((nds) => {
      const remaining = nds.filter(n => !deletedIds.includes(n.id));
      updateParent(remaining, edges);
      return remaining;
    });
  }, [setNodes, edges, updateParent]);

  // Handle edge deletion
  const handleEdgesDelete = useCallback((deleted) => {
    const deletedIds = deleted.map(e => e.id);
    setEdges((eds) => {
      const remaining = eds.filter(e => !deletedIds.includes(e.id));
      updateParent(nodes, remaining);
      return remaining;
    });
  }, [setEdges, nodes, updateParent]);

  const onConnect = useCallback(
    (params) => {
      const newEdge = {
        ...params,
        type: 'labeledStraight',
        data: { label: '' }
      };
      const newEdges = addEdge(newEdge, edges);
      setEdges(newEdges);
      updateParent(nodes, newEdges);
    },
    [edges, setEdges, nodes, updateParent]
  );

  const clearDiagram = useCallback(() => {
    if (window.confirm('Are you sure you want to clear all solutions?')) {
      const swimlaneNodesOnly = nodes.filter(n => n.id.startsWith('header-') || n.id.startsWith('bg-'));
      setNodes(swimlaneNodesOnly);
      setEdges([]);
      updateParent(swimlaneNodesOnly, []);
    }
  }, [nodes, setNodes, setEdges, updateParent]);

  // Add new swimlane
  // Open modal for adding swimlane
  const openAddSwimlaneModal = useCallback(() => {
    setModalState({ isOpen: true, type: 'addSwimlane', swimlaneId: null });
  }, []);

  // Handle adding swimlane from modal
  const handleAddSwimlane = useCallback((name) => {
    const swimlaneHeaders = nodes.filter(n => n.id.startsWith('header-'));
    const newId = `lane-${Date.now()}`;
    const xPosition = swimlaneHeaders.length * 250;

    const newBg = {
      id: `bg-${newId}`,
      type: 'swimlaneBackground',
      data: {
        id: newId,
        label: name.toUpperCase(),
        fullLabel: name,
        color: '#e0e7ff',
        borderColor: '#6366f1',
        textColor: '#312e81',
        x: xPosition
      },
      position: { x: xPosition, y: 40 },
      draggable: false,
      selectable: false,
    };

    const newHeader = {
      id: `header-${newId}`,
      type: 'swimlaneHeader',
      data: {
        id: newId,
        label: name.toUpperCase(),
        fullLabel: name,
        color: '#e0e7ff',
        borderColor: '#6366f1',
        textColor: '#312e81',
      },
      position: { x: xPosition + 15, y: -35 },
      draggable: false,
    };

    const newNodes = [...nodes, newBg, newHeader];
    setNodes(newNodes);
    updateParent(newNodes, edges);
    setModalState({ isOpen: false, type: null, swimlaneId: null });
  }, [nodes, setNodes, edges, updateParent]);

  // Remove last swimlane
  const removeSwimlane = useCallback(() => {
    const swimlaneHeaders = nodes.filter(n => n.id.startsWith('header-'));
    if (swimlaneHeaders.length <= 1) {
      alert('Cannot remove the last swimlane');
      return;
    }

    if (!window.confirm('Remove the last swimlane? This will delete all solutions in it.')) {
      return;
    }

    // Find the last swimlane
    const lastHeader = swimlaneHeaders[swimlaneHeaders.length - 1];
    const swimlaneId = lastHeader.id.replace('header-', '');

    // Remove all nodes and edges related to this swimlane
    const filteredNodes = nodes.filter(n =>
      !n.id.includes(swimlaneId) && n.data?.swimlane !== swimlaneId
    );
    const filteredEdges = edges.filter(e => {
      const sourceNode = nodes.find(n => n.id === e.source);
      const targetNode = nodes.find(n => n.id === e.target);
      return sourceNode?.data?.swimlane !== swimlaneId && targetNode?.data?.swimlane !== swimlaneId;
    });

    setNodes(filteredNodes);
    setEdges(filteredEdges);
    updateParent(filteredNodes, filteredEdges);
  }, [nodes, edges, setNodes, setEdges, updateParent]);

  const resetToDefault = useCallback(() => {
    if (window.confirm('Reset to default ISO 19650 workflow diagram?')) {
      const defaultNodes = getInitialNodes();
      const defaultEdges = getInitialEdges();
      setNodes(defaultNodes);
      setEdges(defaultEdges);
      updateParent(defaultNodes, defaultEdges);
    }
  }, [setNodes, setEdges, updateParent]);

  // Export diagram as JSON
  const exportDiagram = useCallback(() => {
    const diagramData = { nodes, edges };
    const dataStr = JSON.stringify(diagramData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `cde-diagram-${Date.now()}.json`;
    link.click();
    URL.revokeObjectURL(url);
  }, [nodes, edges]);

  // Import diagram from JSON
  const importDiagram = useCallback((e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const imported = JSON.parse(event.target?.result);
        if (imported.nodes && imported.edges) {
          setNodes(imported.nodes);
          setEdges(imported.edges);
          if (imported.swimlaneCustom) {
            setSwimlaneCustom(imported.swimlaneCustom);
          }
          if (imported.nodeStyle) {
            setNodeStyle(imported.nodeStyle);
          }
          updateParent(imported.nodes, imported.edges, imported.swimlaneCustom, imported.nodeStyle);
        }
      } catch (err) {
        alert('Invalid diagram file');
      }
    };
    reader.readAsText(file);
    e.target.value = '';
  }, [setNodes, setEdges, updateParent]);

  // Update swimlane customization
  const updateSwimlaneCustom = useCallback((swimlaneId, property, newValue) => {
    setSwimlaneCustom(prev => {
      const updated = {
        ...prev,
        [swimlaneId]: {
          ...prev[swimlaneId],
          [property]: newValue
        }
      };

      // Apply changes to nodes
      setNodes(nds => {
        const updatedNodes = nds.map(node => {
          if ((node.id === `bg-${swimlaneId}` || node.id === `header-${swimlaneId}`) && updated[swimlaneId]) {
            return {
              ...node,
              data: {
                ...node.data,
                ...updated[swimlaneId]
              }
            };
          }
          return node;
        });
        updateParent(updatedNodes, edges, updated);
        return updatedNodes;
      });

      return updated;
    });
  }, [setNodes, edges, updateParent]);

  // Update node style
  const updateNodeStyle = useCallback((property, newValue) => {
    setNodeStyle(prev => {
      const updated = { ...prev, [property]: newValue };
      updateParent(nodes, edges, swimlaneCustom, updated);
      return updated;
    });
  }, [nodes, edges, swimlaneCustom, updateParent]);

  return (
    <div className="mb-8 w-full">
      <label className="block text-lg font-semibold mb-4 text-gray-800">
        {label} {required && <span className="text-red-500">*</span>}
      </label>

      <div style={{ height: '600px', border: '1px solid #e5e7eb', borderRadius: '8px', overflow: 'hidden' }}>
        <div style={{
          padding: '12px 16px',
          background: '#f9fafb',
          borderBottom: '1px solid #e5e7eb',
          display: 'flex',
          gap: '12px',
          alignItems: 'center',
          flexWrap: 'wrap'
        }}>
          <button
            onClick={resetToDefault}
            style={{
              padding: '8px 16px',
              background: '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <RotateCcw size={16} />
            Reset
          </button>
          <button
            onClick={openAddSwimlaneModal}
            style={{
              padding: '8px 16px',
              background: '#3b82f6',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Plus size={16} />
            Add Swimlane
          </button>
          <button
            onClick={removeSwimlane}
            style={{
              padding: '8px 16px',
              background: '#f59e0b',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Trash2 size={16} />
            Remove Swimlane
          </button>
          <button
            onClick={clearDiagram}
            style={{
              padding: '8px 16px',
              background: '#ef4444',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Trash2 size={16} />
            Clear All
          </button>
          <button
            onClick={exportDiagram}
            style={{
              padding: '8px 16px',
              background: '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Download size={16} />
            Export
          </button>
          <label
            style={{
              padding: '8px 16px',
              background: '#8b5cf6',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Upload size={16} />
            Import
            <input
              type="file"
              accept=".json"
              onChange={importDiagram}
              style={{ display: 'none' }}
            />
          </label>
          <button
            onClick={() => setShowSettings(!showSettings)}
            style={{
              padding: '8px 16px',
              background: showSettings ? '#059669' : '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '14px',
              fontWeight: '500',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              marginLeft: 'auto'
            }}
          >
            <SettingsIcon size={16} />
            {showSettings ? 'Hide Settings' : 'Customize'}
          </button>
        </div>

        {showSettings && (
          <div style={{
            padding: '16px',
            background: '#f3f4f6',
            borderBottom: '1px solid #e5e7eb',
            maxHeight: '300px',
            overflowY: 'auto'
          }}>
            <h3 style={{ fontSize: '14px', fontWeight: '600', marginBottom: '12px' }}>Customize Swimlanes</h3>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px' }}>
              {SWIMLANES.map(lane => {
                const custom = swimlaneCustom[lane.id] || {};
                return (
                  <div key={lane.id} style={{
                    padding: '12px',
                    background: 'white',
                    borderRadius: '6px',
                    border: '1px solid #e5e7eb'
                  }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', marginBottom: '8px' }}>{lane.label}</div>
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                      <div>
                        <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Background Color</label>
                        <input
                          type="color"
                          value={custom.color || lane.color}
                          onChange={(e) => updateSwimlaneCustom(lane.id, 'color', e.target.value)}
                          style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                        />
                      </div>
                      <div>
                        <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Border Color</label>
                        <input
                          type="color"
                          value={custom.borderColor || lane.borderColor}
                          onChange={(e) => updateSwimlaneCustom(lane.id, 'borderColor', e.target.value)}
                          style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                        />
                      </div>
                      <div>
                        <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Text Color</label>
                        <input
                          type="color"
                          value={custom.textColor || lane.textColor}
                          onChange={(e) => updateSwimlaneCustom(lane.id, 'textColor', e.target.value)}
                          style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                        />
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            <h3 style={{ fontSize: '14px', fontWeight: '600', marginTop: '16px', marginBottom: '12px' }}>Customize Solution Nodes</h3>
            <div style={{
              padding: '12px',
              background: 'white',
              borderRadius: '6px',
              border: '1px solid #e5e7eb',
              display: 'grid',
              gridTemplateColumns: 'repeat(3, 1fr)',
              gap: '12px'
            }}>
              <div>
                <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Background Color</label>
                <input
                  type="color"
                  value={nodeStyle.background}
                  onChange={(e) => updateNodeStyle('background', e.target.value)}
                  style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                />
              </div>
              <div>
                <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Border Color</label>
                <input
                  type="color"
                  value={nodeStyle.borderColor}
                  onChange={(e) => updateNodeStyle('borderColor', e.target.value)}
                  style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                />
              </div>
              <div>
                <label style={{ fontSize: '11px', display: 'block', marginBottom: '4px' }}>Text Color</label>
                <input
                  type="color"
                  value={nodeStyle.textColor}
                  onChange={(e) => updateNodeStyle('textColor', e.target.value)}
                  style={{ width: '100%', height: '32px', border: '1px solid #d1d5db', borderRadius: '4px' }}
                />
              </div>
            </div>
          </div>
        )}
        <div style={{ height: showSettings ? 'calc(100% - 400px)' : 'calc(100% - 60px)' }}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={handleNodesChange}
            onEdgesChange={handleEdgesChange}
            onNodesDelete={handleNodesDelete}
            onEdgesDelete={handleEdgesDelete}
            onNodeDragStop={handleNodeDragStop}
            onConnect={onConnect}
            nodeTypes={nodeTypes}
            edgeTypes={edgeTypes}
            connectionMode={ConnectionMode.Loose}
            fitView
            deleteKeyCode="Delete"
            attributionPosition="bottom-left"
            minZoom={0.5}
            maxZoom={1.5}
          >
            <MiniMap
              nodeStrokeWidth={3}
              zoomable
              pannable
            />
            <Controls />
            <Background color="#e5e7eb" gap={16} />
          </ReactFlow>
        </div>
      </div>

      <div className="mt-2 text-sm text-gray-600">
        💡 <strong>Tips:</strong> Double-click nodes/edges to edit • Select and press Delete to remove • Drag horizontally to connect nodes across swimlanes
      </div>

      {error && <p className="text-red-500 text-sm mt-1">{error}</p>}

      <InputModal
        isOpen={modalState.isOpen && modalState.type === 'addNode'}
        onClose={() => setModalState({ isOpen: false, type: null, swimlaneId: null })}
        onSubmit={handleAddNode}
        title="Add Solution"
        placeholder="Enter solution name (e.g., SharePoint, BIM360)"
      />

      <InputModal
        isOpen={modalState.isOpen && modalState.type === 'addSwimlane'}
        onClose={() => setModalState({ isOpen: false, type: null, swimlaneId: null })}
        onSubmit={handleAddSwimlane}
        title="Add Swimlane"
        placeholder="Enter swimlane name (e.g., Review, Approved)"
      />
    </div>
  );
};

export default CDEFlowDiagram;
